{"ast":null,"code":"var _class;\nimport { inject } from \"@angular/core\";\nimport { UserService } from \"./user.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLogged = false;\n    this.userService = inject(UserService);\n    const storedUser = localStorage.getItem('currentUser');\n    this.isLogged = !!storedUser; // If a user is stored, consider the user logged in  \n  }\n\n  login(username, password) {\n    let user = this.userService.users.find(u => u.username === username && u.password === password);\n    if (user === undefined) this.isLogged = false;else {\n      this.isLogged = true;\n      localStorage.setItem('currentUser', JSON.stringify({\n        username,\n        password\n      }));\n    }\n    return user;\n  }\n  logout() {\n    this.isLogged = false;\n    //  localStorage.removeItem('currentUser');\n    localStorage.clear();\n  }\n  isAuthenticated() {\n    return this.isLogged;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","UserService","AuthService","constructor","isLogged","userService","storedUser","localStorage","getItem","login","username","password","user","users","find","u","undefined","setItem","JSON","stringify","logout","clear","isAuthenticated","factory","ɵfac","providedIn"],"sources":["/home/ri-dev/Desktop/Course Ecommerce/start/src/app/Services/auth.service.ts"],"sourcesContent":["import { Injectable, inject } from \"@angular/core\";\nimport { UserService } from \"./user.service\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n    \n    isLogged: boolean = false;\n    userService: UserService = inject(UserService);\n\n    constructor() {\n\n        const storedUser = localStorage.getItem('currentUser');\n        this.isLogged = !!storedUser; // If a user is stored, consider the user logged in  \n    }\n\n    login(username: string, password: string) {\n        let user = this.userService.users.find((u) => \n        u.username === username && u.password === password);\n\n        if (user === undefined)\n            this.isLogged = false;\n        else {\n            this.isLogged = true;\n            localStorage.setItem('currentUser', JSON.stringify({ username, password }));\n        }\n        return user;\n    }\n\n    logout() {\n\n        this.isLogged = false;\n      //  localStorage.removeItem('currentUser');\n        localStorage.clear();\n    }\n\n    isAuthenticated() {\n        return this.isLogged;\n    }\n}\n"],"mappings":";AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,WAAW,QAAQ,gBAAgB;;AAK5C,OAAM,MAAOC,WAAW;EAKpBC,YAAA;IAHA,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAC,WAAW,GAAgBL,MAAM,CAACC,WAAW,CAAC;IAI1C,MAAMK,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACJ,QAAQ,GAAG,CAAC,CAACE,UAAU,CAAC,CAAC;EAClC;;EAEAG,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACpC,IAAIC,IAAI,GAAG,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACC,IAAI,CAAEC,CAAC,IACzCA,CAAC,CAACL,QAAQ,KAAKA,QAAQ,IAAIK,CAAC,CAACJ,QAAQ,KAAKA,QAAQ,CAAC;IAEnD,IAAIC,IAAI,KAAKI,SAAS,EAClB,IAAI,CAACZ,QAAQ,GAAG,KAAK,CAAC,KACrB;MACD,IAAI,CAACA,QAAQ,GAAG,IAAI;MACpBG,YAAY,CAACU,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEC;MAAQ,CAAE,CAAC,CAAC;;IAE/E,OAAOC,IAAI;EACf;EAEAQ,MAAMA,CAAA;IAEF,IAAI,CAAChB,QAAQ,GAAG,KAAK;IACvB;IACEG,YAAY,CAACc,KAAK,EAAE;EACxB;EAEAC,eAAeA,CAAA;IACX,OAAO,IAAI,CAAClB,QAAQ;EACxB;;SAjCSF,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAqB,OAAA,EAAXrB,MAAW,CAAAsB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}